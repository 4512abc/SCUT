package org.example.mapper;

import org.apache.ibatis.annotations.Param;
import org.example.model.entity.Notification;
import java.util.List;
import java.util.Map;

public interface NotificationMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table notification
     *
     * @mbg.generated
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table notification
     *
     * @mbg.generated
     */
    int insert(Notification row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table notification
     *
     * @mbg.generated
     */
    int insertSelective(Notification row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table notification
     *
     * @mbg.generated
     */
    Notification selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table notification
     *
     * @mbg.generated
     */
    int updateByPrimaryKeySelective(Notification row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table notification
     *
     * @mbg.generated
     */
    int updateByPrimaryKey(Notification row);

    //    TOTORO,选择用户评论通知
    List<Notification> selectCommentNotifications(@Param("params") Map<String, Object> params);

    //       由TOTORO编写
    List<Notification> selectLikeNotifications(@Param("params") Map<String, Object> params);

    Notification selectByTypeIdAndType(@Param("userId") Long userId,@Param("typeId") Long typeId, @Param("type") Byte type);

    /**
     * 根据类型ID和类型查询通知
     * @param params 查询参数
     * @return TOTORO
     * @return 通知列表
     */
    List<Notification> selectAnnouncementNotifications(@Param("params") Map<String, Object> params);

    /**
     * 根据类型ID和类型删除通知
     * @param typeId 类型ID
     * @param type 类型
     * @return 删除的行数
     * 由TOTORO编写
     */
    int deleteByTypeIdAndType(@Param("typeId") Long typeId, @Param("type") Byte type);

    /**
     * 根据类型ID和类型更新通知
     * @param typeId 类型ID
     * @param type 类型
     * @param notification 通知实体
     * @return 更新的行数
     */
    int updateByTypeIdAndType(@Param("typeId") Long typeId, @Param("type") Byte type, @Param("notification") Notification notification);
    /**
     * 根据 senderId、receiverId、type 和 typeId 联合查找通知记录，默认返回第一条记录。
     * 如果未找到记录，则返回 null。
     *
     * @param senderId 发送者ID
     * @param receiverId 接收者ID
     * @param type 通知类型
     * @param typeId 类型ID
     * @return 查找到的通知记录，若无记录则返回 null
     */
    Notification selectBySenderReceiverTypeAndTypeId(
            @Param("senderId") Long senderId,
            @Param("receiverId") Long receiverId,
            @Param("type") Byte type,
            @Param("typeId") Long typeId);

    /**
     * 根据接收者ID和通知类型查找通知记录列表
     * @param receiverId 接收者ID
     * @param type 通知类型
     * @return 通知记录列表
     */

    /**
     * 根据接收者ID、通知类型和已读状态查找通知记录列表
     * @param receiverId 接收者ID
     * @param type 通知类型
     * @param isRead 已读状态
     * @return 通知记录列表
     */
    List<Notification> selectByReceiverIdTypeAndIsRead(
            @Param("receiverId") Long receiverId,
            @Param("type") Byte type,
            @Param("isRead") Boolean isRead);

    List<Notification> selectChallengeNotifications(@Param("params") Map<String, Object> params);

}


