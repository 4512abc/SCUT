<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.mapper.PostMapper">
  <resultMap id="BaseResultMap" type="org.example.model.entity.Post">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="images" jdbcType="VARCHAR" property="images" />
    <result column="videos" jdbcType="VARCHAR" property="videos" />
    <result column="is_public" jdbcType="BIT" property="isPublic" />
    <result column="view_count" jdbcType="INTEGER" property="viewCount" />
    <result column="like_count" jdbcType="INTEGER" property="likeCount" />
    <result column="comment_count" jdbcType="INTEGER" property="commentCount" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="landmark_name" jdbcType="VARCHAR" property="landmarkName" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="org.example.model.entity.PostWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
    <result column="location" jdbcType="BINARY" property="location" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, user_id, title, images, videos, is_public, view_count, like_count, comment_count,
    status, create_time, landmark_name
  </sql>
  <sql id="Blob_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    content, location
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from post
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from post
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="org.example.model.entity.PostWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into post (id, user_id, title,
    images, videos, is_public,
    view_count, like_count, comment_count,
    status, create_time, landmark_name,
    content, location)
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{title,jdbcType=VARCHAR},
    #{images,jdbcType=VARCHAR}, #{videos,jdbcType=VARCHAR}, #{isPublic,jdbcType=BIT},
    #{viewCount,jdbcType=INTEGER}, #{likeCount,jdbcType=INTEGER}, #{commentCount,jdbcType=INTEGER},
    #{status,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, #{landmarkName,jdbcType=VARCHAR},
    #{content,jdbcType=LONGVARCHAR}, #{location,jdbcType=BINARY})
  </insert>
<!--  TOTORO：进行了自增处理！！！-->
  <insert id="insertSelective" parameterType="org.example.model.entity.PostWithBLOBs"
          useGeneratedKeys="true" keyProperty="id">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into post
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="images != null">
        images,
      </if>
      <if test="videos != null">
        videos,
      </if>
      <if test="isPublic != null">
        is_public,
      </if>
      <if test="viewCount != null">
        view_count,
      </if>
      <if test="likeCount != null">
        like_count,
      </if>
      <if test="commentCount != null">
        comment_count,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="landmarkName != null">
        landmark_name,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="location != null">
        location,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="images != null">
        #{images,jdbcType=VARCHAR},
      </if>
      <if test="videos != null">
        #{videos,jdbcType=VARCHAR},
      </if>
      <if test="isPublic != null">
        #{isPublic,jdbcType=BIT},
      </if>
      <if test="viewCount != null">
        #{viewCount,jdbcType=INTEGER},
      </if>
      <if test="likeCount != null">
        #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="commentCount != null">
        #{commentCount,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="landmarkName != null">
        #{landmarkName,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="location != null">
        ST_GeomFromWKB(#{location}, 4326),
      </if>
    </trim>
  </insert>
<!--  TOTORO:进行了地址上的处理！！！-->


  <update id="updateByPrimaryKeySelective" parameterType="org.example.model.entity.PostWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update post
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="images != null">
        images = #{images,jdbcType=VARCHAR},
      </if>
      <if test="videos != null">
        videos = #{videos,jdbcType=VARCHAR},
      </if>
      <if test="isPublic != null">
        is_public = #{isPublic,jdbcType=BIT},
      </if>
      <if test="viewCount != null">
        view_count = #{viewCount,jdbcType=INTEGER},
      </if>
      <if test="likeCount != null">
        like_count = #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="commentCount != null">
        comment_count = #{commentCount,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="landmarkName != null">
        landmark_name = #{landmarkName,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="location != null">
        location = #{location,jdbcType=BINARY},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="org.example.model.entity.PostWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update post
    set user_id = #{userId,jdbcType=BIGINT},
    title = #{title,jdbcType=VARCHAR},
    images = #{images,jdbcType=VARCHAR},
    videos = #{videos,jdbcType=VARCHAR},
    is_public = #{isPublic,jdbcType=BIT},
    view_count = #{viewCount,jdbcType=INTEGER},
    like_count = #{likeCount,jdbcType=INTEGER},
    comment_count = #{commentCount,jdbcType=INTEGER},
    status = #{status,jdbcType=TINYINT},
    create_time = #{createTime,jdbcType=TIMESTAMP},
    landmark_name = #{landmarkName,jdbcType=VARCHAR},
    content = #{content,jdbcType=LONGVARCHAR},
    location = #{location,jdbcType=BINARY}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.example.model.entity.Post">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update post
    set user_id = #{userId,jdbcType=BIGINT},
    title = #{title,jdbcType=VARCHAR},
    images = #{images,jdbcType=VARCHAR},
    videos = #{videos,jdbcType=VARCHAR},
    is_public = #{isPublic,jdbcType=BIT},
    view_count = #{viewCount,jdbcType=INTEGER},
    like_count = #{likeCount,jdbcType=INTEGER},
    comment_count = #{commentCount,jdbcType=INTEGER},
    status = #{status,jdbcType=TINYINT},
    create_time = #{createTime,jdbcType=TIMESTAMP},
    landmark_name = #{landmarkName,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>

<!--  通过挑战id拿到博文，同时需要转义一下地理位置，然后可以直接拿到了！！！-->
<!--  由TOTORO编写-->
  <select id="selectPostWithBLOBsById" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />,
    <include refid="Blob_Column_List" />
    content,
    ST_AsText(location) as location
    from post
    where id = #{id,jdbcType=BIGINT}
  </select>
<!--  隔开！！！-->

  <select id="selectPostTotal" resultType="int">
    SELECT COUNT(*) FROM post
  </select>

  <select id="selectPostAddToday" resultType="int">
    SELECT COUNT(*) FROM post WHERE DATE(create_time) = CURDATE()
  </select>

<!--  由TOTORO编辑，拿到博文列表进行排序用的，这里实际上不需要公开也可以显示出来！！！-->
  <select id="selectPostsWithBLOBs" parameterType="map" resultMap="ResultMapWithBLOBs">
    SELECT
    <include refid="Base_Column_List" />,
    content,
    ST_AsText(location) as location
    FROM post
    WHERE user_id = #{params.userId}
    AND status = 1
    <if test="params.lastCursor != null and params.lastCursor != 0">
      AND id &lt;= #{params.lastCursor}
    </if>
    ORDER BY id DESC
    LIMIT #{params.size}
  </select>
<!--隔开，TOTORO-->

<!--  TOTORO-->
  <select id="selectByIds" resultType="org.example.model.entity.Post">
    SELECT * FROM post WHERE id IN
    <foreach collection="ids" item="id" open="(" separator="," close=")">
      #{id}
    </foreach>
  </select>
<!--  -->
  <select id="selectMonthlyPostAndChallengeCount" resultType="org.example.model.vo.HomeVo.HomeMonthDataVo">
    SELECT
    month,
    SUM(postCount) AS postCount,
    SUM(challengeCount) AS challengeCount
    FROM (
    -- 查询post表的月份和发帖数
    SELECT
    DATE_FORMAT(create_time, '%Y-%m') AS month,
    COUNT(*) AS postCount,
    0 AS challengeCount
    FROM post
    WHERE create_time >= DATE_SUB(CURDATE(), INTERVAL 5 MONTH)
    GROUP BY month

    UNION ALL

    -- 查询challenge表的月份和挑战数
    SELECT
    DATE_FORMAT(create_time, '%Y-%m') AS month,
    0 AS postCount,
    COUNT(*) AS challengeCount
    FROM challenge
    WHERE create_time >= DATE_SUB(CURDATE(), INTERVAL 5 MONTH)
    GROUP BY month
    ) combined_data
    GROUP BY month
    ORDER BY month DESC
  </select>

  <select id="selectUserLikeCount" resultType="java.lang.Integer">
    SELECT SUM(like_count) FROM post WHERE user_id = #{userId}
  </select>
  <select id="selectUserCommentCount" resultType="java.lang.Integer">
    SELECT SUM(comment_count) FROM post WHERE user_id = #{userId}
  </select>

<!--  TOTORo-->
  <select id="selectPostsWithBLOBs_1" parameterType="map" resultMap="ResultMapWithBLOBs">
    SELECT
    <include refid="Base_Column_List" />,
    content,
    ST_AsText(location) as location
    FROM post
    WHERE status = 1
    AND is_public = 1  <!-- 新增公开性判断 -->
    <if test="params.lastCursor != null and params.lastCursor != 0">
      AND id &lt;= #{params.lastCursor}
    </if>
    ORDER BY id DESC
    LIMIT #{params.size}
  </select>
<!--  -->
<!--TOTORO-->
  <select id="selectLandmarkPostsWithBLOBs" parameterType="map" resultMap="ResultMapWithBLOBs">
    SELECT
    <include refid="Base_Column_List" />,
    content,
    ST_AsText(location) as location
    FROM post
    WHERE user_id = #{params.userId}
    AND status = 1
    AND landmark_name IS NOT NULL
    ORDER BY id DESC
  </select>
<!--  -->
<!--  TOTORO-->
  <select id="selectPostsWithBLOBsbyLandmarkName" parameterType="map" resultMap="ResultMapWithBLOBs">
    SELECT
    <include refid="Base_Column_List" />,
    content,
    ST_AsText(location) as location
    FROM post
    WHERE user_id = #{params.userId}
    AND status = 1
    <if test="params.landmarkName != null and params.landmarkName != ''">
      AND landmark_name = #{params.landmarkName}
    </if>
    <if test="params.lastCursor != null and params.lastCursor != 0">
      AND id &lt;= #{params.lastCursor}
    </if>
    ORDER BY id DESC
    <if test="params.size != null and params.size > 0">
      LIMIT #{params.size}
    </if>
  </select>
<!--  -->
  <!--  TOTORO-->
  <select id="selectOtherPostsWithBLOBsbyLandmarkName" parameterType="map" resultMap="ResultMapWithBLOBs">
    SELECT
    <include refid="Base_Column_List" />,
    content,
    ST_AsText(location) as location
    FROM post
    WHERE user_id != #{params.userId}
    AND status = 1
    AND is_public = 1
    <if test="params.landmarkName != null and params.landmarkName != ''">
      AND landmark_name = #{params.landmarkName}
    </if>
    <if test="params.lastCursor != null and params.lastCursor != 0">
      AND id &lt;= #{params.lastCursor}
    </if>
    ORDER BY id DESC
    <if test="params.size != null and params.size > 0">
      LIMIT #{params.size}
    </if>
  </select>
  <!--  -->
    <select id="selectByTitleAndCreateTimeRange" parameterType="map" resultMap="ResultMapWithBLOBs">
        <!--用于博文内容的检索-->
        SELECT
        <include refid="Base_Column_List" />
        , content
        , ST_AsText(location) as location
        FROM post
        WHERE 1=1
        <if test="title != null and title != ''">
            AND title LIKE CONCAT('%', #{title}, '%')
        </if>
        <if test="startTime != null and endTime != null">
            AND create_time BETWEEN #{startTime} AND #{endTime}
        </if>
        ORDER BY create_time DESC
    </select>

  <select id="selectByTitleAndCreateTimeRange_1" parameterType="map" resultMap="ResultMapWithBLOBs">
    <!--用于博文内容的检索-->
    SELECT
    <include refid="Base_Column_List" />
    , content
    , ST_AsText(location) as location
    FROM post
    WHERE status = 1
    AND is_public = 1
    <if test="params.title != null and params.title != ''">
      AND title LIKE CONCAT('%', #{params.title}, '%')
    </if>
    <if test="params.startTime != null and params.endTime != null">
      AND create_time BETWEEN #{params.startTime} AND #{params.endTime}
    </if>
    <if test="params.lastCursor != null and params.lastCursor != 0">
      AND id &lt;= #{params.lastCursor}
    </if>
    ORDER BY id DESC
    <if test="params.size != null and params.size > 0">
      LIMIT #{params.size}
    </if>
  </select>

    <!-- 由TOTORO编写 -->
    <select id="selectUserPostCount" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM post WHERE user_id = #{userId}
    </select>

  <select id="selectByTitleAndCreateTimeRange_2" parameterType="map" resultMap="ResultMapWithBLOBs">
    <!--用于博文内容的检索-->
    SELECT
    <include refid="Base_Column_List" />
    , content
    , ST_AsText(location) as location
    FROM post
    WHERE status = 1
    AND user_id = #{params.userId}
    <if test="params.title != null and params.title != ''">
      AND title LIKE CONCAT('%', #{params.title}, '%')
    </if>
    <if test="params.startTime != null and params.endTime != null">
      AND create_time BETWEEN #{params.startTime} AND #{params.endTime}
    </if>
    <if test="params.lastCursor != null and params.lastCursor != 0">
      AND id &lt;= #{params.lastCursor}
    </if>
    ORDER BY id DESC
    <if test="params.size != null and params.size > 0">
      LIMIT #{params.size}
    </if>
  </select>

</mapper>
