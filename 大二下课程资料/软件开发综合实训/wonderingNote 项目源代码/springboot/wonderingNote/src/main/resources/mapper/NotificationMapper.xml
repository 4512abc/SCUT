<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.mapper.NotificationMapper">
  <resultMap id="BaseResultMap" type="org.example.model.entity.Notification">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="sender_id" jdbcType="BIGINT" property="senderId" />
    <result column="receiver_id" jdbcType="BIGINT" property="receiverId" />
    <result column="type" jdbcType="TINYINT" property="type" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="is_read" jdbcType="BIT" property="isRead" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="type_id" jdbcType="BIGINT" property="typeId" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, sender_id, receiver_id, type, content, is_read, create_time, type_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <include refid="Base_Column_List" />
    from notification
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from notification
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="org.example.model.entity.Notification" useGeneratedKeys="true" keyProperty="id">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into notification (id, sender_id, receiver_id,
    type, content, is_read,
    create_time, type_id)
    values (#{id,jdbcType=BIGINT}, #{senderId,jdbcType=BIGINT}, #{receiverId,jdbcType=BIGINT},
    #{type,jdbcType=TINYINT}, #{content,jdbcType=VARCHAR}, #{isRead,jdbcType=BIT},
    #{createTime,jdbcType=TIMESTAMP}, #{typeId,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="org.example.model.entity.Notification" useGeneratedKeys="true" keyProperty="id">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into notification
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="senderId != null">
        sender_id,
      </if>
      <if test="receiverId != null">
        receiver_id,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="isRead != null">
        is_read,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="typeId != null">
        type_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="senderId != null">
        #{senderId,jdbcType=BIGINT},
      </if>
      <if test="receiverId != null">
        #{receiverId,jdbcType=BIGINT},
      </if>
      <if test="type != null">
        #{type,jdbcType=TINYINT},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="isRead != null">
        #{isRead,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="typeId != null">
        #{typeId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.example.model.entity.Notification">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update notification
    <set>
      <if test="senderId != null">
        sender_id = #{senderId,jdbcType=BIGINT},
      </if>
      <if test="receiverId != null">
        receiver_id = #{receiverId,jdbcType=BIGINT},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=TINYINT},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="isRead != null">
        is_read = #{isRead,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="typeId != null">
        type_id = #{typeId,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.example.model.entity.Notification">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update notification
    set sender_id = #{senderId,jdbcType=BIGINT},
    receiver_id = #{receiverId,jdbcType=BIGINT},
    type = #{type,jdbcType=TINYINT},
    content = #{content,jdbcType=VARCHAR},
    is_read = #{isRead,jdbcType=BIT},
    create_time = #{createTime,jdbcType=TIMESTAMP},
    type_id = #{typeId,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <resultMap id="CommentNotificationResultMap" type="org.example.model.dto.UserMsgDto.CommentInfoDto">
    <id column="n_id" property="id" />
    <result column="c_post_id" property="postId" />
    <result column="c_parent_id" property="parentId" />
    <result column="c_content" property="content" />
    <result column="c_like_count" property="likeCount" />
    <result column="n_is_read" property="isRead" />
  </resultMap>

  <!--  TOTORO-->
  <select id="selectCommentNotifications" parameterType="map" resultMap="BaseResultMap">
    SELECT * FROM notification
    WHERE receiver_id = #{params.receiverId}
    AND type = #{params.type}
    <if test="params.lastCursor != null and params.lastCursor != 0">
      AND id &lt;= #{params.lastCursor}
    </if>
    ORDER BY id DESC
    LIMIT #{params.size}
  </select>
  <!--  -->

  <select id="selectByTypeIdAndType" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM notification
    WHERE type_id = #{typeId}
    AND type = #{type}
    AND receiver_id = #{userId}
  </select>

  <!--  由TOTORO编写-->
  <select id="selectLikeNotifications" parameterType="map" resultType="org.example.model.entity.Notification">
    SELECT * FROM notification
    WHERE receiver_id = #{params.receiverId}
    AND type = #{params.type}
    <if test="params.lastCursor != null and params.lastCursor != 0">
      AND id &lt;= #{params.lastCursor}
    </if>
    ORDER BY id DESC
    LIMIT #{params.size}
  </select>
  <!--  -->
  <!--  由TOTORO编写-->
  <delete id="deleteByTypeIdAndType">
    DELETE FROM notification
    WHERE type_id = #{typeId} AND type = #{type}
  </delete>
  <!--  -->

  <update id="updateByTypeIdAndType">
    UPDATE notification
    <set>
      <if test="notification.senderId != null">
        sender_id = #{notification.senderId},
      </if>
      <if test="notification.receiverId != null">
        receiver_id = #{notification.receiverId},
      </if>
      <if test="notification.type != null">
        type = #{notification.type},
      </if>
      <if test="notification.content != null">
        content = #{notification.content},
      </if>
      <if test="notification.isRead != null">
        is_read = #{notification.isRead},
      </if>
      <if test="notification.createTime != null">
        create_time = #{notification.createTime},
      </if>
      <if test="notification.typeId != null">
        type_id = #{notification.typeId},
      </if>
    </set>
    WHERE type_id = #{typeId} AND type = #{type}
  </update>



  <select id="selectBySenderReceiverTypeAndTypeId" parameterType="map" resultMap="BaseResultMap">
    <!--
      根据 senderId、receiverId、type 和 typeId 联合查找通知记录，默认返回第一条记录。
      如果未找到记录，则返回 null。
    -->
    SELECT
    <include refid="Base_Column_List" />
    FROM notification
    WHERE sender_id = #{senderId}
    AND receiver_id = #{receiverId}
    AND type = #{type}
    AND type_id = #{typeId}
    ORDER BY id ASC
    LIMIT 1
  </select>

  <select id="selectByReceiverIdTypeAndIsRead" parameterType="map" resultMap="BaseResultMap">
    <!--
      根据接收者ID、通知类型和已读状态查找通知记录列表
    -->
    SELECT
    <include refid="Base_Column_List" />
    FROM notification
    WHERE receiver_id = #{receiverId}
    AND type = #{type}
    AND is_read = #{isRead}
    ORDER BY id ASC
  </select>

  <!--TOTORO编写-->
  <select id="selectAnnouncementNotifications" parameterType="map" resultMap="BaseResultMap">
    SELECT * FROM notification
    WHERE receiver_id = #{params.receiverId}
    AND type = #{params.type}
    <if test="params.lastCursor != null and params.lastCursor != 0">
      AND id &lt;= #{params.lastCursor}
    </if>
    ORDER BY id DESC
    LIMIT #{params.size}
  </select>
  <!--  -->

  <select id="selectChallengeNotifications" parameterType="map" resultMap="BaseResultMap">
    SELECT * FROM notification
    WHERE receiver_id = #{params.receiverId}
    AND type = #{params.type}
    <if test="params.lastCursor != null and params.lastCursor != 0">
      AND id &lt;= #{params.lastCursor}
    </if>
    ORDER BY id DESC
    LIMIT #{params.size}
  </select>


</mapper>
